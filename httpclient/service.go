package httpclient

import (
	"bytes"
	"chitfund/config"
	"chitfund/models"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
)

// Service struct holds config and http client
type Service struct {
	Config     *config.Config
	HttpClient *http.Client
}

// NewService initializes a new Service with config and http client
func NewService(cfg *config.Config, client *http.Client) *Service {
	return &Service{
		Config:     cfg,
		HttpClient: client,
	}
}

// GetExampleData makes a GET request to the API
func (s *Service) GetIdgUserData(idempotencyId string) (*models.IdgDataFetchResponse, error) {
	type Request struct {
		IdempotencyId string `json:"idempotency_id"`
	}

	request := Request{
		IdempotencyId: idempotencyId,
	}
	jsonData, _ := json.Marshal(request)
	req, err := http.NewRequest("POST", s.Config.IdgApiUrl+"/business/transaction/data/fetch", bytes.NewBuffer(jsonData))
	if err != nil {
		return nil, fmt.Errorf("could not create request: %w", err)
	}
	req.Header.Set("Content-Type", "application/json")

	// Set authorization header
	req.Header.Set("Authorization", "Basic "+s.Config.IdgApiToken)

	resp, err := s.HttpClient.Do(req)
	if err != nil {
		return nil, fmt.Errorf("request failed: %w", err)
	}
	defer resp.Body.Close()

	// Read and unmarshal response body into AutoGenerated struct
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("could not read response body: %w", err)
	}

	var result models.IdgDataFetchResponse
	if err := json.Unmarshal(body, &result); err != nil {
		return nil, fmt.Errorf("could not unmarshal response body: %w", err)
	}

	return &result, nil
}

func (s *Service) InitTransaction(idempotencyId string, mobileNumber string) (*models.IdgInitTransactionResponse, error) {

	request := models.IdgInitTransactionRequest{
		GatewayInstanceID: s.Config.GatewayInstanceID,
		ClientID:          s.Config.ClientId,
		IdempotencyID:     idempotencyId,
		ClientSecret:      s.Config.ClientSecret,
		Keys:              []interface{}{},
		TransactionInput: struct {
			Mobile string "json:\"mobile\""
		}{
			Mobile: mobileNumber,
		},
	}
	jsonData, _ := json.Marshal(request)
	req, err := http.NewRequest("POST", s.Config.IdgApiUrl+"/business/ie/transaction/init", bytes.NewBuffer(jsonData))
	if err != nil {
		return nil, fmt.Errorf("could not create request: %w", err)
	}
	req.Header.Set("Content-Type", "application/json")

	// Set authorization header
	req.Header.Set("Authorization", "Basic "+s.Config.IdgApiToken)

	resp, err := s.HttpClient.Do(req)
	if err != nil {
		return nil, fmt.Errorf("request failed: %w", err)
	}
	defer resp.Body.Close()

	// Read and unmarshal response body into AutoGenerated struct
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("could not read response body: %w", err)
	}

	fmt.Printf(resp.Status)

	var result models.IdgInitTransactionResponse
	if err := json.Unmarshal(body, &result); err != nil {
		return nil, fmt.Errorf("could not unmarshal response body: %w", err)
	}

	return &result, nil
}
